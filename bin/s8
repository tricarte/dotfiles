#!/usr/bin/env perl

use strict;
use warnings;
use warnings FATAL => "all";
use utf8;
use 5.34.0;
# use diagnostics; # When encountering an error, it will try to explain it.
# use Data::Dumper qw(Dumper);
use List::Util qw(max);

use DBI;

# Handle input
push @ARGV, <STDIN> if -p STDIN; # Now we also accept stdin.
my $arg = join ' ', @ARGV;
my $input = undef;
if ( $arg ne '' ) {
    $input = $arg;
} else {
    print "Enter the search query: ";
    $input = <STDIN>;
}
chomp $input;
my ($mime, $qstring) = $input =~ /:/ ? ( split /:/, $input ) : ( '', $input );

# Connect to database
my $dbase = $ENV{'HOME'} . '/repos/sniploc-bulma-carton/src/db/dbase.sqlite';
my $dsn = "dbi:SQLite:dbname=$dbase";
my $dbh = DBI->connect($dsn, "", "", {
        PrintError => 1,
        RaiseError => 1,
        AutoCommit => 1,
        FetchHashKeyName => 'NAME_lc',
    });
$dbh->do("PRAGMA foreign_keys = ON");

my $sql =
q/SELECT
sifts.title, si.type, sifts.uuid, si.parent_id, replace(g.parents_title, 'HOME -', '') as parents_title, sifts.content
FROM snpy_items_fts sifts
JOIN snpy_items si ON si.id = sifts.rowid
JOIN generation g ON g.id = si.parent_id
WHERE si.deleted = 0/;
my @bindings = ();
if ($mime) {
    $sql .= ' AND parents_title LIKE ?';
    push @bindings, "%$mime%";
}

if ( $qstring =~ /^".+"$/ ) {
    # This is a phrased based search
    push @bindings, $qstring;
}
else {
    # This is a prefixed token based search. I needed to quote each word of the query.
    # otherwise queries containing non alphanumeric chars cause trouble.
    push @bindings, join " ", map { "\"$_\"*" } ( split / /, $qstring );
}

$sql .=
q/ AND snpy_items_fts MATCH ? ORDER BY bm25(snpy_items_fts, 15.0, 2.0, 1.0)/;

my $sth = $dbh->prepare($sql);
my @records = $dbh->selectall_array($sth, undef, @bindings);
$dbh->disconnect();

my $fzfinput = "";
my %results= ();

my $max_width = max (map length, map { $$_[4] } @records);

for my $row ( @records ) {
    $results{$$row[2]} = $$row[5]; # uuid => snippet_content pair
    # ParentTabTitleTabUUIDTabType
    $fzfinput .= sprintf "%-${max_width}s\t%s\t%s\t%s\n",
        $$row[4], $$row[0], $$row[2], $$row[1];
        # 4 parent
        # 0 title
        # 2 uuid
        # 1 type
}

# --nth is the search scope
# --with-nth: which fields to display
my $command = <<"END_CMD";
printf "${fzfinput}" \\
| fzf --delimiter='\t' \\
--with-nth=1,2 \\
--nth=1.. \\
--query="${mime} ${qstring}" \\
--preview='sqlite3 $dbase "SELECT content FROM snpy_items WHERE snpy_items.uuid IS {3};" -noheader' \\
--preview-window=up
END_CMD
#  | bat --language {4} --pager=never
# --select-1

my ( undef, undef, $chosen ) = split /\t/, `${command}`;
system('printf \'%s\' ' . "\"$results{$chosen}\"" . ' | $(command -v xclip) -selection clipboard') if $chosen;
# open(XCLIP, '| xclip -selection clipboard');
# print XCLIP $results{$chosen};
# close XCLIP;
say $results{$chosen} if $chosen;
