#TODO: This may cause problems when resourcing .bashrc
# shellcheck source=/dev/null
# BASHRC_CUSTOM_LOADED="yes"

# PROMPT_COMMAND="history -a; $PROMPT_COMMAND"
PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"
# PROMPT_COMMAND="history -a; history -r; $PROMPT_COMMAND"

# load .bash_functions
if [ -f ~/.bash_functions ]; then
  . ~/.bash_functions
fi

# # load prompt theme
# if [ -f ~/.shell_prompt_airline.sh ]; then
#     . ~/.shell_prompt_airline.sh
# fi
eval "$(starship init bash)"

# added to prevent exiting with ctrl + d for tmux
IGNOREEOF=3 # Shell only exists after the third consecutive Ctrl-d
# set -o ignoreeof  # Same as setting IGNOREEOF=3

# pathmunge "$HOME/.composer/vendor/bin:$HOME/.npm-global/bin"
# PATH="$HOME/.composer/vendor/bin:$HOME/.npm-global/bin:$PATH"

. /usr/share/autojump/autojump.bash

# explain.sh begins
explain() {
  if [ "$#" -eq 0 ]; then
    while read -p "Command: " cmd; do
      curl -Gs "https://www.mankier.com/api/explain/?cols="$(tput cols) --data-urlencode "q=$cmd"
    done
    echo "Bye!"
  elif [ "$#" -eq 1 ]; then
    curl -Gs "https://www.mankier.com/api/explain/?cols="$(tput cols) --data-urlencode "q=$1"
  else
    echo "Usage"
    echo "explain                  interactive mode."
    echo "explain 'cmd -o | ...'   one quoted command to explain it."
  fi
}

[ -f ~/.fzf.bash ] && source ~/.fzf.bash
# export FZF_DEFAULT_COMMAND='rg --files'
export FZF_DEFAULT_COMMAND="rg --files --no-ignore-vcs --glob '!*/{.git,node_modules}/**'"
export FZF_CTRL_T_COMMAND="rg --files --no-ignore-vcs --glob '!*/{.git,node_modules}/**'"
export FZF_ALT_C_COMMAND="fd --type d --no-ignore-vcs --exclude node_modules --exclude .git"
# -m allows multiple selection
# export FZF_DEFAULT_OPTS='-m --height 100% --color=bg+:#C792EA,fg+:#1C1C1C,gutter:-1'
export FZF_DEFAULT_OPTS='-m --height 100%'

# https://minsw.github.io/fzf-color-picker/
# Another fzf theme generator
# https://vitormv.github.io/fzf-themes/
# export FZF_DEFAULT_OPTS=$FZF_DEFAULT_OPTS'
# --color=fg:#d0d0d0,bg:#263238,hl:#5f87af
# --color=fg+:#d0d0d0,bg+:#562c5c,hl+:#5fd7ff
# --color=info:#afaf87,prompt:#d7005f,pointer:#af5fff
# --color=marker:#87ff00,spinner:#af5fff,header:#87afaf'

# Palenight
# export FZF_DEFAULT_OPTS=$FZF_DEFAULT_OPTS'
#  --color=fg:#8796b0,bg:#292d3e,hl:#82aaff
#  --color=fg+:#959dcb,bg+:#444267,hl+:#82aaff
#  --color=info:#ffcb6b,prompt:#ffcb6b,pointer:#89ddff
#  --color=marker:#89ddff,spinner:#89ddff,header:#82aaff'

# Dracula
# export FZF_DEFAULT_OPTS=$FZF_DEFAULT_OPTS'
# --color=fg:#f8f8f2,bg:#282a36,hl:#bd93f9
# --color=fg+:#f8f8f2,bg+:#44475a,hl+:#bd93f9
# --color=info:#ffb86c,prompt:#50fa7b,pointer:#ff79c6
# --color=marker:#ff79c6,spinner:#ffb86c,header:#6272a4'

# Spacecamp: This is the one I use in material ocean dark theme
if [[ $KITTY_CONF_THEME == "include dark-theme.conf" ]]; then
  export FZF_DEFAULT_OPTS=$FZF_DEFAULT_OPTS'
 --color=fg:#dedede,bg:#0f111a,hl:#666666
 --color=fg+:#eeeeee,bg+:#282828,hl+:#cf73e6
 --color=info:#cf73e6,prompt:#FF0000,pointer:#cf73e6
 --color=marker:#f0d50c,spinner:#cf73e6,header:#91aadf'
fi

# ayu-light theme
if [[ $KITTY_CONF_THEME == "include light-theme.conf" ]]; then
  # https://github.com/tinted-theming/tinted-fzf/blob/main/bash/base16-tomorrow.config
  color00='#ffffff'
  color01='#e0e0e0'
  color02='#d6d6d6'
  color03='#8e908c'
  color04='#969896'
  color05='#4d4d4c'
  color06='#282a2e'
  color07='#1d1f21'
  color08='#c82829'
  color09='#f5871f'
  color0A='#eab700'
  color0B='#718c00'
  color0C='#3e999f'
  color0D='#4271ae'
  color0E='#8959a8'
  color0F='#a3685a'

  export FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS""\
 --color=bg+:$color01,bg:$color00,spinner:$color0C,hl:$color0D""\
 --color=fg:$color04,header:$color0D,info:$color0A,pointer:$color0C""\
 --color=marker:$color0C,fg+:$color06,prompt:$color0A,hl+:$color0D"
fi

# catppuccin-latte for fzf
# https://github.com/catppuccin/fzf
# export FZF_DEFAULT_OPTS=" \
# --color=bg+:#CCD0DA,bg:#EFF1F5,spinner:#DC8A78,hl:#D20F39 \
# --color=fg:#4C4F69,header:#D20F39,info:#8839EF,pointer:#DC8A78 \
# --color=marker:#7287FD,fg+:#4C4F69,prompt:#8839EF,hl+:#D20F39 \
# --color=selected-bg:#BCC0CC \
# --color=border:#9CA0B0,label:#4C4F69"

# catppuccin-mocha
export FZF_DEFAULT_OPTS=" \
--color=bg+:#313244,bg:#1E1E2E,spinner:#F5E0DC,hl:#F38BA8 \
--color=fg:#CDD6F4,header:#F38BA8,info:#CBA6F7,pointer:#F5E0DC \
--color=marker:#B4BEFE,fg+:#CDD6F4,prompt:#CBA6F7,hl+:#F38BA8 \
--color=selected-bg:#45475A \
--color=border:#6C7086,label:#CDD6F4"

# Custom
# export FZF_DEFAULT_OPTS=$FZF_DEFAULT_OPTS'
# --color=fg:#d0d0d0,bg:#0f111a,hl:#5f87af
# --color=fg+:#d0d0d0,bg+:#262626,hl+:#5fd7ff
# --color=info:#afaf87,prompt:#d7005f,pointer:#af5fff
# --color=marker:#87ff00,spinner:#af5fff,header:#87afaf'

# Seou256 Dusk
# export FZF_DEFAULT_OPTS=$FZF_DEFAULT_OPTS'
# --color fg:242,bg:236,hl:65,fg+:15,bg+:239,hl+:108
# --color info:108,prompt:109,spinner:108,pointer:168,marker:168'

# load cht.sh completion
if [ -f ~/.cht.completion.sh ]; then
  source ~/.cht.completion.sh
fi

# load wpcli completion
if [ -f ~/.wp-completion.bash ]; then
  source ~/.wp-completion.bash
fi

# load rustic completion
if [ -f ~/.rustic-completions.bash ]; then
  source ~/.rustic-completions.bash
fi

# load wpsite completion
if [ -f ~/.wpsite-completion.bash ]; then
  source ~/.wpsite-completion.bash
fi

# load rstc completion
if [ -f ~/.rstc-completion.bash ]; then
  source ~/.rstc-completion.bash
fi

# load drush.php completion
if [ -f ~/.drush-php-completion.sh ]; then
  source ~/.drush-completion.sh
fi

# load drush completion
if [ -f ~/.drush-completion.sh ]; then
  source ~/.drush-completion.sh
fi

# Load ssh key for github/gitlab
# FIXME: This supposes that only one key is added to the agent
# and it is github/gitlab key.
ssh-add -l >/dev/null 2>&1
if [ $? -eq 1 ]; then
  if [ -f ~/.ssh/github-id_rsa.pub ]; then
    ssh-add ~/.ssh/github-id_rsa >/dev/null 2>&1
  fi
fi

# Provide directory completion for wpr function
_wpr_complete() {
  local cur

  # FIXME: This is hardcoded.
  if [[ -z "${SITESDIR}" ]]; then
    SITESDIR="$HOME/sites"
  fi

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}

  if [ "$COMP_CWORD" -eq 1 ]; then
    FD=$(command -v fd)
    if [[ $FD ]]; then
      COMPREPLY=($(compgen -W "$($FD wpstarter.json --max-depth 2 --type f --base-directory $SITESDIR --color never --exec dirname)" -- $cur))
    else
      COMPREPLY=($(compgen -W "$(find $SITESDIR/ -maxdepth 2 -type f -name wpstarter.json -exec dirname {} \; | xargs -i basename {})" -- $cur))
    fi
  fi

  return 0
}
complete -F _wpr_complete wpr

# Be modular!!!
# Include additional shell script files
if [[ -d "$HOME/Library/bashrc.d" ]]; then
  for FN in "$HOME"/Library/bashrc.d/*.sh; do
    source "$FN"
  done
fi

if [[ -f "$HOME/.cargo/env" ]]; then
  source "$HOME/.cargo/env"
fi

# TMUXP=$(command -v tmuxp)
# if [[ $TMUXP ]]; then
#   eval "$(_TMUXP_COMPLETE=bash_source tmuxp)"
# fi

# export LF_BOOKMARK_PATH="$HOME/.config/lf/bookmarks"

# export VISUAL="vim --remote-silent"
export VISUAL="vim"
# Without --remote-silent below doesn't work with lf with e key mapping
# export VISUAL="vim"
export EDITOR="$VISUAL"

export BAT_PAGER='less -F -R --incsearch -i -J -g'

export ANDROID_HOME="${HOME}/Android/Sdk"
# export ANDROID_HOME="/usr/lib/android-sdk"
# export PATH=$ANDROID_HOME/cmdline-tools/bin:$PATH
export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$PATH
# export PATH=$ANDROID_HOME/emulator/:$PATH
export PATH=$ANDROID_HOME/platform-tools/:$PATH
export PATH="$HOME/Downloads/flutter/bin:$PATH"

# if [[ -f "${HOME}/.apis" ]]; then
#   source "${HOME}/.apis"
# fi

# if [[ -f "${HOME}/perl5/perlbrew/etc/bashrc" ]]; then
#   source "${HOME}/perl5/perlbrew/etc/bashrc"
# fi

PATH="${HOME}/perl5/bin${PATH:+:${PATH}}"
export PATH
PERL5LIB="${HOME}/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"
export PERL5LIB
PERL_LOCAL_LIB_ROOT="${HOME}/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"
export PERL_LOCAL_LIB_ROOT
PERL_MB_OPT="--install_base \"${HOME}/perl5\""
export PERL_MB_OPT
PERL_MM_OPT="INSTALL_BASE=${HOME}/perl5"
export PERL_MM_OPT

# https://stackoverflow.com/questions/5302650/multi-level-bash-completion

_rcsync_complete() {
  local cur

  PROFILESDIR="${HOME}/.config/rustic/"

  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}

  if [ "$COMP_CWORD" -eq 1 ]; then
    COMPREPLY=($(compgen -W "$(find "${PROFILESDIR}" -type f -name '*.toml' -exec basename {} .toml \;)" -- $cur))
  fi

  return 0
}
complete -F _rcsync_complete rcsync

# For colorized man pages
export LESS_TERMCAP_mb=$'\e[01;31m' \
  export LESS_TERMCAP_md=$'\e[01;31m' \
  export LESS_TERMCAP_me=$'\e[0m' \
  export LESS_TERMCAP_se=$'\e[0m' \
  export LESS_TERMCAP_so=$'\e[01;44;33m' \
  export LESS_TERMCAP_ue=$'\e[0m' \
  export LESS_TERMCAP_us=$'\e[01;32m'

if [[ ! $PATH =~ /usr/local/go/bin ]]; then
  export PATH=$PATH:/usr/local/go/bin
fi

if [[ ! $PATH =~ $HOME/go/bin ]]; then
  export PATH=$PATH:$HOME/go/bin
fi

# To get rid of the vaapi errors for some apps like mpv
export LIBVA_DRIVER_NAME=i965

GPG_TTY=$(tty)
export GPG_TTY

export LUA_PATH="lua_modules/share/lua/5.1/?.lua;./lua_modules/share/lua/5.1/?/init.lua;./?.lua;/usr/local/share/lua/5.1/?.lua;/usr/local/share/lua/5.1/?/init.lua;/usr/local/lib/lua/5.1/?.lua;/usr/local/lib/lua/5.1/?/init.lua;/usr/share/lua/5.1/?.lua;/usr/share/lua/5.1/?/init.lua;${HOME}/.luarocks/share/lua/5.1/?.lua;${HOME}/.luarocks/share/lua/5.1/?/init.lua"

export LUA_CPATH="lua_modules/lib/lua/5.1/?.so;./?.so;/usr/local/lib/lua/5.1/?.so;/usr/lib/x86_64-linux-gnu/lua/5.1/?.so;/usr/lib/lua/5.1/?.so;/usr/local/lib/lua/5.1/loadall.so;${HOME}/.luarocks/lib/lua/5.1/?.so"

export LUA_PATH_5_4="lua_modules/share/lua/5.4/?.lua;./lua_modules/share/lua/5.4/?/init.lua;./?.lua;/usr/local/share/lua/5.4/?.lua;/usr/local/share/lua/5.4/?/init.lua;/usr/local/lib/lua/5.4/?.lua;/usr/local/lib/lua/5.4/?/init.lua;/usr/share/lua/5.4/?.lua;/usr/share/lua/5.4/?/init.lua;${HOME}/.luarocks/share/lua/5.4/?.lua;${HOME}/.luarocks/share/lua/5.4/?/init.lua"

export LUA_CPATH_5_4="lua_modules/lib/lua/5.4/?.so;./?.so;/usr/local/lib/lua/5.4/?.so;/usr/lib/x86_64-linux-gnu/lua/5.4/?.so;/usr/lib/lua/5.4/?.so;/usr/local/lib/lua/5.4/loadall.so;${HOME}/.luarocks/lib/lua/5.4/?.so"

export PATH="${HOME}/.luarocks/bin:${PATH}"

export PATH="$PATH:/opt/nvim-linux-x86_64/bin"

# source "/etc/profile.d/rvm.sh"

# https://askubuntu.com/questions/413436/copy-current-terminal-prompt-to-clipboard
if [[ -n $DISPLAY ]]; then
  copy_line_to_x_clipboard () {
    printf %s "$READLINE_LINE" | xclip -selection CLIPBOARD
  }
  bind -x '"\C-y": copy_line_to_x_clipboard'
fi

export PATH="$PATH:./vendor/bin"

export PATH="$PATH":"$HOME/.pub-cache/bin"

if [ -f ~/.local/share/bash-completion/completions/deno.bash ]; then
  . ~/.local/share/bash-completion/completions/deno.bash
fi
export PATH=$HOME/.deno/bin:$PATH
export VOLTA_HOME="$HOME/.volta"
export PATH="$VOLTA_HOME/bin:$PATH"
